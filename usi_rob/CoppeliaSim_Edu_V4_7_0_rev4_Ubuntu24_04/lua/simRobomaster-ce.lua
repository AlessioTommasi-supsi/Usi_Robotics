local codeEditorInfos=[[
int handle = simRobomaster.create(int handle, string remote_api_network="", string serial_number="", bool camera_use_udp=false, int camera_bitrate=1000000, bool enable_camera=true, bool enable_gripper=true, bool enable_arm=true, bool enable_gimbal=true, bool enable_vision=true)
int handle = simRobomaster.create_ep(int handle, string remote_api_network="", string serial_number="")
int handle = simRobomaster.create_s1(int handle, string remote_api_network="", string serial_number="")
simRobomaster.set_target_twist(int handle, map twist)
map twist = simRobomaster.get_twist(int handle)
map speeds = simRobomaster.get_wheel_speeds(int handle)
simRobomaster.set_target_wheel_speeds(int handle, map speeds)
map odometry = simRobomaster.get_odometry(int handle)
map imu = simRobomaster.get_imu(int handle)
map attitude = simRobomaster.get_attitude(int handle)
int handle = simRobomaster.move_to(int handle, map pose, float linear_speed=0.5, float angular_speed=1.0)
string status = simRobomaster.get_action_state(int handle, int action)
simRobomaster.set_led_effect(int handle, float r, float g, float b, string effect="on", int mask=0xFF, int led_mask=0xFF, float period_on=0.5, float period_off=0.5, bool loop=true)
simRobomaster.set_gripper_target(int handle, string state, float power=0.5)
string state = simRobomaster.get_gripper(int handle)
map position = simRobomaster.get_arm_position(int handle)
int handle = simRobomaster.move_arm(int handle, float x, float z, bool absolute)
simRobomaster.enable_camera(int handle, bool enabled, string resolution="720p")
int handle = simRobomaster.move_gimbal(int handle, float yaw, float pitch, float yaw_speed, float pitch_speed, string yaw_frame="chassis", string pitch_frame="fixed")
float yaw, float pitch = simRobomaster.get_gimbal_angles(int handle, string yaw_frame="chassis", string pitch_frame="fixed")
simRobomaster.set_gimbal_target_speeds(int handle, float yaw, float pitch)
float angle = simRobomaster.get_servo_angle(int handle, int servo)
simRobomaster.enable_gimbal(int handle, bool value)
simRobomaster.set_blaster_led(int handle, float intensity)
int handle = simRobomaster.move_servo(int handle, int servo, float angle)
simRobomaster.set_servo_target_speed(int handle, int servo, float speed)
simRobomaster.set_servo_mode(int handle, int servo, string mode)
simRobomaster.enable_servo(int handle, int servo, bool value)
simRobomaster.set_mode(int handle, string mode)
simRobomaster.enable_distance_sensor(int handle, int port, int sensor_handle)
simRobomaster.disable_distance_sensor(int handle, int port)
float distance = simRobomaster.get_distance_reading(int handle, int port)
simRobomaster.set_log_level(string log_level)
int[] handles = simRobomaster.get_handles()
simRobomaster.set_vision_class(int handle, string name, int type)
simRobomaster.configure_vision(int handle, float min_width=0.5, float min_height=0.5, float tolerance=0.0)
simRobomaster.enable_vision(int handle, int mask)
map[] bounding_boxes = simRobomaster.get_detected_robots(int handle)
map[] bounding_boxes = simRobomaster.get_detected_people(int handle)
simRobomaster.VISION.PERSON
simRobomaster.VISION.ROBOT
]]

registerCodeEditorInfos("simRobomaster",codeEditorInfos)
